---
title: "Lua VR Mod Development Patterns"
description: "Essential Lua patterns for VR mod code generation"
type: "patterns"
globs: ["Assets/Build/**/Script/**/*.txt", "**/*.lua"]
alwaysApply: true
tags: ["lua", "vr", "api", "patterns"]
---

# Lua VR Mod Development Patterns

## Core Module Structure
```lua
local {ModName} = {
    enabled = true,
    initialized = false,
    _config = {},
    _handlers = {},
    _resources = {},
}

function {ModName}:Awake()
    self:InitializeHandlers()
    self:LoadConfig()
    self.initialized = true
end

return {ModName}
```

## VR Event Handlers
```lua
function Module:InitializeHandlers()
    -- VR grab/release events
    self._grabHandler = function(grabInfo) self:OnGrab(grabInfo) end
    self._releaseHandler = function(releaseInfo) self:OnRelease(releaseInfo) end
    
    -- VR stab events (for weapons)
    self._stabEnterHandler = function(stabInfo) self:OnStab(stabInfo) end
    self._stabExitHandler = function(stabInfo) self:OnStabExit(stabInfo) end
    
    -- Register with C# layer
    if self.host and self.host.interact then
        local stabObject = self.host.interact:GetStabObject()
        if stabObject then
            stabObject:StabEnterEvent("+", self._stabEnterHandler)
            stabObject:StabExitEvent("+", self._stabExitHandler)
        end
    end
end

function Module:OnGrab(grabInfo)
    local handType = grabInfo.handType -- "Left" or "Right"
    local grabStrength = grabInfo.strength
    
    if grabStrength > 0.8 then
        self:OnFullGrab(handType)
    else
        self:OnPartialGrab(handType, grabStrength)
    end
end
```

## Essential APIs

### Unity Engine APIs (UE namespace)
```lua
-- Time functions
UE.Time.time
UE.Time.deltaTime
UE.Time.frameCount

-- Math operations  
UE.Vector3.Lerp(from, to, t)
UE.Vector3.Dot(a, b)
UE.Quaternion.LookRotation(forward, up)

-- GameObject operations
UE.GameObject(name)
UE.Object.Destroy(obj, delay)

-- Physics
UE.Physics.Raycast(origin, direction, distance)

-- Debug logging
UE.Debug.Log(message)
UE.Debug.LogError(message)
```

### CrossLink Core APIs (CL namespace)
```lua
-- Resource Management (from Readme)
CL.ResourceMgr.Load(address)
CL.ResourceMgr.LoadAsync(address, callback)  
CL.ResourceMgr.Instantiate(address)
CL.ResourceMgr.Instantiate(address, pos, rot)

-- Effect Management
CL.EffectMgr.Instance:PlayEffect(name, pos, rot)
CL.EffectMgr.Instance:GiveBack(effectObj)

-- Audio Management  
CL.AudioMgr.Instance:GiveBackAndLerpToZero(soundInfo)

-- Scheduler System
CL.Scheduler.Create(target, action)
CL.Scheduler.RemoveSchedule(actionId)
CL.Scheduler.UpdateChannel.FixedUpdate

-- FlyObject Creation
CL.FlyObject.CreateFlyObj(prefab, source, pos, dir)
```

### Event System (from Readme)
```lua
-- LuaFunction → Actual Event mapping
-- AwakeInit → Awake
-- StartInit → Start

function Module:OnAwake()     -- Called by AwakeInit
    self:Initialize()
end

function Module:OnStart()     -- Called by StartInit  
    self:BeginLogic()
end
```

## VR Component Setup (from Readme)
```lua
function Module:SetupComponents()
    -- Essential VR Components
    self.weapon = self.host.interact:GetComponent("InteractWeapon")
    self.trigger = self.host.interact:GetComponent("InteractTriggerX")
    self.stabObj = self.host.interact:GetStabObject()
    self.hitInfo = self.host.interact:GetComponent("RagdollHitInfoObj")
    self.attachPoint = self.host.interact:GetComponent("AttachPoint")
    
    -- FlyObject setup for projectiles
    self.flyObj = self.host:GetComponent("FlyObjX")
    if self.flyObj then
        self.flyObj:OnHit(function(hitInfo) self:OnProjectileHit(hitInfo) end)
    end
end
```

## Common Patterns

### Weapon Controller
```lua
local WeaponController = {
    MAX_AMMO = 30,
    FIRE_RATE = 0.1,
    currentAmmo = 0,
    isReloading = false,
    _lastFireTime = 0,
}

function WeaponController:Fire()
    if not self:CanFire() then return false end
    
    self._lastFireTime = UE.Time.time
    self.currentAmmo = self.currentAmmo - 1
    
    self:CreateProjectile()
    return true
end

function WeaponController:CanFire()
    return self.currentAmmo > 0 
        and not self.isReloading 
        and (UE.Time.time - self._lastFireTime) >= self.FIRE_RATE
end
```

### Magic System
```lua
local MagicController = {
    spellConfig = {
        Fire = { projectile = "WMD_Fireball", effect = "Effect/FireCast" },
        Ice = { projectile = "WMD_IceShard", effect = "Effect/IceCast" }
    },
    currentSpell = "Fire"
}

function MagicController:CastSpell(targetPosition)
    local spell = self.spellConfig[self.currentSpell]
    if not spell then return false end
    
    local projectile = CL.ResourceMgr.Instantiate(spell.projectile, 
        self.castPoint.position, self.castPoint.rotation)
    CL.EffectMgr.Instance:PlayEffect(spell.effect, self.castPoint.position)
    return true
end
```
