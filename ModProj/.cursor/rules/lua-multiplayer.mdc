---
title: "Multiplayer Patterns for Lua Mods"
description: "Network synchronization patterns for Lua VR mod code generation"
type: "patterns"
globs: ["**/*.lua", "**/*.txt"]
alwaysApply: false
tags: ["multiplayer", "network", "lua"]
---

# Multiplayer Patterns for Lua Mods

## RPC Patterns
```lua
-- Basic RPC
RPCTarget = UE.NetworkBehaviour.RPCTarget
function self:CastSpell(power)
    self.netObj:RPC("DoSpell", RPCTarget.All, power)
end

function self:DoSpell(power)
    -- Execute spell on all clients
    local effect = CL.EffectMgr.Instance:PlayEffect("magic_explosion")
end

-- Server only RPC
function self:DamageTarget(damage)
    if UE.NetworkManager.Singleton.IsServer then
        self.netObj:RPC("TakeDamage", RPCTarget.All, damage)
    end
end
```

## Network Variables
```lua
local NetworkVariable = UE.Unity.Netcode.NetworkVariable
local NetworkVariableWritePermission = UE.Unity.Netcode.NetworkVariableWritePermission

-- Setup in Init()
self.netHealth = NetworkVariable.new(100, NetworkVariableWritePermission.Server)
self.netPosition = NetworkVariable.new(UE.Vector3.zero, NetworkVariableWritePermission.Owner)

-- Read values
local currentHealth = self.netHealth.Value
local pos = self.netPosition.Value

-- Write values (only if authorized)
if UE.NetworkManager.Singleton.IsServer then
    self.netHealth.Value = newHealth
end
```

## FlyObject Network Registration
```lua
-- In Config asset, register all networked objects
networkPrefabRegister = {
    "WMD_MagicArrow",          -- Projectiles
    "WMD_FireBall",            -- Spells
    "WMD_Shield",              -- Defensive objects
}

-- Create networked FlyObject
function self:CreateProjectile()
    local flyObj = CL.FlyObject.CreateFlyObj("WMD_MagicArrow")
    -- flyObj automatically has network sync if registered
end
```

## Ownership Patterns
```lua
-- Check ownership before modifying
if self.netObj.IsOwner then
    self.transform.position = newPosition
    self.netPosition.Value = newPosition
end

-- Check server authority
if UE.NetworkManager.Singleton.IsServer then
    self.netHealth.Value = self.netHealth.Value - damage
end

-- Client-side prediction with server validation
function self:MoveWeapon(targetPos)
    -- Immediate client update
    self.transform.position = targetPos
    
    -- Request server validation
    if self.netObj.IsOwner then
        self.netObj:RPC("ValidateMove", RPCTarget.Server, targetPos)
    end
end
```

## Event Sync Pattern
```lua
function self:TriggerNetworkEvent(eventName, data)
    if self.netObj.IsOwner then
        self.netObj:RPC("OnNetworkEvent", RPCTarget.All, eventName, data)
    end
end

function self:OnNetworkEvent(eventName, data)
    if eventName == "spell_cast" then
        self:PlaySpellEffect(data.effectName, data.position)
    elseif eventName == "weapon_swing" then
        self:PlaySwingAnimation(data.direction)
    end
end
```
