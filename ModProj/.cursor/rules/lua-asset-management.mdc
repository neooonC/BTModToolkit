---
title: "Asset Management for Lua Mods"
description: "Asset loading patterns for Lua VR mod code generation"
type: "patterns"
globs: ["Assets/Build/**/*", "**/*.asset"]
alwaysApply: false
tags: ["assets", "addressables", "lua"]
---

# Asset Management for Lua Mods

## Resource Paths (from Readme)
```lua
-- Standard resource paths with automatic prefix handling
"Weapon/MagicSword"           -- Loaded as CL.ResourceMgr.Load("MagicSword")
"LuaScript/WeaponBase"        -- Loaded as CL.ResourceMgr.Load("WeaponBase")  
"ICon/weapon_sword"           -- Loaded as CL.ResourceMgr.Load("weapon_sword")
"Effect/explosion"            -- Loaded as CL.EffectMgr.Instance:PlayEffect("explosion")
"Audio/Sound/bow_release"     -- Loaded as CL.ResourceMgr.Load("bow_release")
"FlyObj/magic_arrow"          -- Loaded as CL.ResourceMgr.Load("magic_arrow")

-- Entry Point Convention
"LuaScript/Entry"             -- Mod entry point script
```

## Loading Patterns
```lua
-- Basic asset loading (see lua-vr-patterns.mdc for full API reference)
local weapon = CL.ResourceMgr.Instantiate("WMD_MagicBow")
local audioClip = CL.ResourceMgr.Load("Audio/BowStringRelease")

-- Async loading with callback
CL.ResourceMgr.LoadAsync("WMD_FireArrow", function(asset)
    self._arrowPrefab = asset
end)

-- Effect loading (path prefix automatic)
CL.EffectMgr.Instance:PlayEffect("explosion")   -- "Effect/explosion"
CL.EffectMgr.Instance:PlayEffect("trail_magic") -- "Effect/trail_magic"
```

## Simplified Asset Manager
```lua
-- Lightweight asset caching (see lua-vr-patterns.mdc for full ResourceCache)
local AssetManager = {
    _loadedAssets = {},
}

function AssetManager:GetCached(address)
    return self._loadedAssets[address]
end

function AssetManager:Cache(address, asset)
    self._loadedAssets[address] = asset
end

function AssetManager:LoadWithCache(address, callback)
    local cached = self:GetCached(address)
    if cached then
        if callback then callback(cached) end
        return cached
    end
    
    CL.ResourceMgr.LoadAsync(address, function(asset)
        self:Cache(address, asset)
        if callback then callback(asset) end
    end)
end
```

## Network Prefab Registration
```lua
-- networkPrefabRegister in Config asset
-- All FlyObjects created via CL.FlyObject.CreateFlyObj() must be registered
networkPrefabRegister = {
    "WMD_Bow_Magic",           -- Main weapon
    "WMD_FireBall",            -- Projectile
    "WMD_MagicArrowTrail",     -- Effects
}
```
