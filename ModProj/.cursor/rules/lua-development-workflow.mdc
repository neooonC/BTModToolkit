---
title: "Lua VR Mod Development Workflow" 
description: "Code generation patterns for Lua VR mod development"
type: "workflow"
globs: ["Assets/Build/**/*", "**/*.txt"]
alwaysApply: true
tags: ["workflow", "lua", "vr"]
---

# Lua VR Mod Development Workflow

## Module Structure Template
```lua
-- {ModName}Script.txt
local {ModName} = {
    enabled = true,
    initialized = false,
    _config = {},
    _handlers = {},
}

function {ModName}:Awake()
    self:InitializeHandlers()
    self:LoadConfig()
    self.initialized = true
end

function {ModName}:InitializeHandlers()
    -- VR event handlers
    self._grabHandler = function(grabInfo) self:OnGrab(grabInfo) end
    self._releaseHandler = function(releaseInfo) self:OnRelease(releaseInfo) end
    
    -- Register with C# layer
    if self.host and self.host.interact then
        local stabObject = self.host.interact:GetStabObject()
        if stabObject then
            stabObject:StabEnterEvent("+", self._stabEnterHandler)
        end
    end
end

return {ModName}
```

## Performance Patterns
```lua
function Module:Update()
    -- Throttle expensive operations for VR performance
    if UE.Time.frameCount % 5 == 0 then
        self:UpdateLowFrequency()
    end
end

function Module:CleanupResources()
    -- Release resources to prevent memory leaks
    for _, asset in pairs(self._cachedAssets) do
        if asset then UE.Object.Destroy(asset) end
    end
    self._cachedAssets = {}
end
```

## Error Handling Patterns
```lua
function Module:SafeCall(apiCall, ...)
    local success, result = pcall(apiCall, ...)
    if not success then
        UE.Debug.LogError("API call failed: " .. tostring(result))
        return nil
    end
    return result
end

function Module:ValidateGameObject(obj, name)
    if not obj or UE.Object.op_Equality(obj, nil) then
        UE.Debug.LogWarning((name or "GameObject") .. " is null or destroyed")
        return false
    end
    return true
end
```
