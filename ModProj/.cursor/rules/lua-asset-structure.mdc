---
description: 'Unified rules for asset loading, addressable paths, config structure, and directory/naming standards for Battle Talent VR mods.'
globs: ["Assets/Build/**/*", "**/*.asset"]
alwaysApply: false
---

# Battle Talent Mod Asset & Structure Guide

## üö® CRITICAL: AI MUST READ REFERENCE PREFABS FIRST

**Before generating ANY prefab:**
1. **READ the reference prefab** from examples below
2. **COPY exact structure** - only modify asset references
3. **NEVER create from scratch**

## Addressable Path Conventions

**‚ö†Ô∏è CRITICAL: WMD_ Prefix Usage Rules**
- **WMD_ prefix is ONLY used for Addressable paths** in the asset loading system
- **Asset files themselves should NOT use WMD_ prefix** in their actual filenames
- **Directory names and file names follow standard naming conventions** without WMD_ prefix
- **Only use WMD_ prefix in Lua code resource loading paths**

**Correct Usage Examples:**
```
‚úÖ File Path: Assets/Build/MagicSword/Weapon/MagicSword.prefab
‚úÖ Addressable Path: Weapon/WMD_MagicSword
‚úÖ Lua Loading Code: CL.ResourceMgr.Load("Weapon/WMD_MagicSword")

‚ùå WRONG: Assets/Build/WMD_MagicSword/Weapon/WMD_MagicSword.prefab
‚ùå WRONG: Using WMD_ prefix in directory names
```

**Addressable Path Category Templates:**
```lua
-- Custom mod assets use WMD_ prefix for loading:
"Weapon/WMD_MagicSword"      -- Weapon prefab
"LuaScript/WMD_WeaponBase"   -- Lua script
"ICon/WMD_weapon_sword"      -- Icon texture
"Effect/WMD_explosion"       -- Effect prefab
"Audio/WMD_bow_release"      -- Audio clip
"FlyObj/WMD_magic_arrow"     -- Projectile prefab
"Role/WMD_CustomWarrior"     -- Character role
"Avatar/WMD_PlayerModel"     -- Player avatar
"Scene/WMD_CustomArena"      -- Scene prefab
"SceneObj/WMD_MyCube"        -- Scene object prefab
"Spell/WMD_FireBall"         -- Spell/Magic prefab
"Item/WMD_HealthPotion"      -- Item/Potion prefab
"Tower/WMD_Turret"           -- Tower/Turret prefab
"Equipment/WMD_Scabbard"     -- Accessory/Equipment prefab
"Skin/WMD_CharacterSkin"     -- Character skin model
"BrokenArmor/WMD_Helmet"     -- Broken armor pieces
"ArmorProfile/WMD_Profile"   -- Armor configuration profile
"Audio/WMD_epic_music"       -- Background song
```

## Asset Loading Patterns

**‚ö†Ô∏è IMPORTANT: Use WMD_ prefix in Addressable paths for custom mods**

```lua
-- Instantiate prefabs (use WMD_ prefix for custom mod assets)
local weapon = CL.ResourceMgr.Instantiate("Weapon/WMD_MagicBow")
local projectile = CL.ResourceMgr.Instantiate("FlyObj/WMD_FireArrow")

-- Load assets (use WMD_ prefix for custom mod assets)
local audioClip = CL.ResourceMgr.Load("Audio/WMD_BowStringRelease")
local texture = CL.ResourceMgr.Load("ICon/WMD_weapon_icon")
local script = CL.ResourceMgr.Load("LuaScript/WMD_WeaponScript")

-- Async loading for heavy assets
CL.ResourceMgr.LoadAsync("FlyObj/WMD_FireArrow", function(asset)
    self._arrowPrefab = asset
end)

-- Play effects (use WMD_ prefix for custom effects)
CL.EffectMgr.Instance:PlayEffect("WMD_explosion")

-- Built-in game assets (no WMD_ prefix needed)
local builtinEffect = CL.ResourceMgr.Load("Effect/explosion")
local builtinAudio = CL.ResourceMgr.Load("Audio/hit_sound")
```

## Directory & Naming Standards
```
Assets/Build/{ModName}/
‚îú‚îÄ‚îÄ Script/{Component}Script.txt        # Lua behavior scripts
‚îú‚îÄ‚îÄ Config/{ModName}_Info.asset         # Mod configuration
‚îú‚îÄ‚îÄ Weapon/{ModName}.prefab             # Weapon prefabs
‚îú‚îÄ‚îÄ Role/{ModName}.prefab               # Character role prefabs
‚îú‚îÄ‚îÄ Avatar/{ModName}.prefab             # Player avatar prefabs
‚îú‚îÄ‚îÄ Scene/{ModName}.prefab              # Scene prefabs
‚îú‚îÄ‚îÄ SceneObj/{ModName}.prefab           # Scene object prefabs
‚îú‚îÄ‚îÄ Spell/{ModName}.prefab              # Spell/Magic prefabs
‚îú‚îÄ‚îÄ Skin/{ModName}.fbx                  # Character skin model
‚îú‚îÄ‚îÄ BrokenArmor/{ArmorPiece}.prefab     # Broken armor pieces
‚îú‚îÄ‚îÄ ArmorProfile/{ModName}.asset        # Armor configuration profile
‚îú‚îÄ‚îÄ Effect/{ModName}_Effect.prefab      # Visual effects
‚îú‚îÄ‚îÄ Audio/{ModName}_Action.wav          # Sound effects
‚îú‚îÄ‚îÄ Audio/{ModName}_Background.ogg      # Background songs
‚îú‚îÄ‚îÄ ICon/{ModName}_icon.png             # UI icons
‚îî‚îÄ‚îÄ FlyObj/{ModName}_Projectile.prefab  # Projectiles
```

**Naming Conventions:**
- Lua scripts: `{Component}Script.txt`
- Config assets: `{ModName}_Info.asset`
- Prefabs: `{ModName}_{Variant}.prefab`
- Audio files: `{ModName}_{Action}.wav`
- Background songs: `{ModName}_Background.ogg`
- Icons: `{ModName}_icon.png`
- Effects: `{ModName}_{Effect}.prefab`

## Config Asset Structure Examples

**Important: Examine the reference config assets below to understand the correct structure for each mod type.**

### Weapon Mod Config (Swords, Bows, Guns, etc.)
**Reference Examples:**
- `Assets/Build/SwordLightBlade/Config/SwordLightBlade_Info.asset`
- `Assets/Build/Bow_Magic/Config/Bow_Magic_Info.asset`
- `Assets/Build/Gun_AK47/Config/Gun_AK47_Info.asset`
- `Assets/Build/Wand_FireBall/Config/Wand_FireBall_Info.asset`
- `Assets/Build/Dagger_Explode/Config/Dagger_Explode_Info.asset`
- `Assets/Build/Spear_Thunder/Config/Spear_Thunder_Info.asset`

### Role/Character Config
**Reference Example:** `Assets/Build/SimpleRole/Config/SimpleRole_Info.asset`

### Avatar Config
**Reference Example:** `Assets/Build/SimpleAvatar/Config/SimpleAvatar_Info.asset`
**Large Avatar Example:** `Assets/Build/SimpleAvatar_Huge/Config/SimpleAvatar_Huge_Info.asset`

### Character Skin Config
**Reference Example:** `Assets/Build/SimpleCharacterSkin/Config/SimpleCharacterSkin_Info.asset`

### Armor Profile Config
**Reference Example:** `Assets/Build/SimpleRole/ArmorProfile/SimpleArmorProfile.asset`

### Hand Pose Config
**Reference Example:** `Assets/Build/SimpleHandPose/Config/SimpleHandPose_Info.asset`
**Bow with Hand Pose:** `Assets/Build/Bow_SimpleWithHandPose/Config/Bow_SimpleWithHandPose_Info.asset`

### Scene Config
**Reference Examples:**
- `Assets/Build/SimpleScene/Config/SimpleScene.asset`
- `Assets/Build/SimpleScene_Net/Config/SimpleScene_Net.asset`
- `Assets/Build/SceneArena/Config/SceneArena.asset`
- `Assets/Build/SpiderTagScene/Config/SpiderTagScene.asset`
- `Assets/Build/SurvivorMode/Config/SurvivorScene.asset`

### Scene Object Config
**Reference Example:** `Assets/Build/SimpleSceneObj_Cube/Config/SimpleSceneObj_Cube.asset`

### Background Song Config
**Reference Example:** `Assets/Build/SimpleBackgroundSong/Config/SimpleBackgroundSong.asset`

### Spell/Magic Config
**Reference Examples:**
- `Assets/Build/Spell_FireBall/Config/Spell_FireBall_Info.asset`
- `Assets/Build/Spell_Thunder/Config/Spell_Thunder_Info.asset`
- `Assets/Build/Spell_Telekinetic/Config/Spell_Telekinetic_Info.asset`

### Item/Potion Config
**Reference Example:** `Assets/Build/Potion_HP/Config/Potion_HP_Info.asset`

### Tower/Turret Config
**Reference Example:** `Assets/Build/Tower_Turret/Config/Tower_Turret_Info.asset`

### Accessory/Equipment Config
**Reference Examples:**
- `Assets/Build/Scabbard/Config/Scabbard_Info.asset`
- `Assets/Build/Scabbard_Sword/Config/Scabbard_Sword_Info.asset`

### Tool Config
**Reference Example:** `Assets/Build/HandPoseTool/Config/HandPoseTool_Info.asset`

## Network Prefab Registration

**‚ö†Ô∏è IMPORTANT: Use WMD_ prefix in Addressable paths for network registration**

```lua
-- All interactive objects that need multiplayer sync
-- Use full Addressable paths with WMD_ prefix
networkPrefabRegister = {
    "Weapon/WMD_MagicBow",            -- Weapon
    "FlyObj/WMD_FireBall",            -- Projectile
    "Effect/WMD_MagicArrowTrail",     -- Trail effect
    "Role/WMD_CustomRole",            -- Character role
    "Spell/WMD_FireBallSpell",        -- Spell
    "Tower/WMD_Turret",               -- Tower
}
```

## Mod Development Requirements
- Config assets must be of type `ItemInfoConfig` (Unity ScriptableObject)
- Config assets are automatically handled by the mod system
- No manual loading code needed for config assets
- All interactive objects require proper network setup for multiplayer

## Addressable Asset Groups Setup

**Critical: After generating mod resources, you MUST update the Addressable Asset Groups to register your assets for proper loading.**

### Required Steps for AI Tools:
1. **Examine existing entries** in `Assets/AddressableAssetsData/AssetGroups/Default Local Group.asset`
2. **Add new entries** following the established patterns below
3. **Update the YAML structure** to include all generated mod assets
4. **Maintain consistency** with existing naming conventions

### Addressable Registration Patterns
**Reference the existing entries in `Default Local Group.asset` and follow these patterns:**

**‚ö†Ô∏è IMPORTANT: WMD_ Prefix Usage**
- **Addressable Path (m_Address)**: Uses `WMD_` prefix for identification
- **File Path (References)**: Uses normal naming without `WMD_` prefix
- **Example**: `m_Address: "Weapon/WMD_MagicSword"` ‚Üí `References: "Assets/Build/MagicSword/Weapon/MagicSword.prefab"`

#### Weapon Assets
```yaml
# Main weapon prefab
- m_Address: Weapon/WMD_YourWeaponName
  # References: Assets/Build/YourMod/Weapon/YourWeapon.prefab

# Weapon icon
- m_Address: ICon/WMD_YourWeaponName  
  # References: Assets/Build/YourMod/ICon/YourWeapon_icon.png

# Weapon effects (if any)
- m_Address: Effect/WMD_YourEffectName
  # References: Assets/Build/YourMod/Effect/YourEffect.prefab

# Weapon projectiles (if any)
- m_Address: FlyObj/WMD_YourProjectileName
  # References: Assets/Build/YourMod/FlyObj/YourProjectile.prefab
```

#### Lua Scripts
```yaml
# All Lua scripts must be registered
- m_Address: LuaScript/WMD_YourScriptName
  # References: Assets/Build/YourMod/Script/YourScript.txt
```

#### Role/Avatar Assets
```yaml
# Character roles
- m_Address: Role/WMD_YourRoleName
  # References: Assets/Build/YourMod/Role/YourRole.prefab

# Player avatars  
- m_Address: Avatar/WMD_YourAvatarName
  # References: Assets/Build/YourMod/Avatar/YourAvatar.prefab
```

#### Scene Assets
```yaml
# Custom scenes
- m_Address: Scene/WMD_YourSceneName
  # References: Assets/Build/YourMod/Scene/YourScene.prefab

# Scene objects
- m_Address: SceneObj/WMD_YourObjectName
  # References: Assets/Build/YourMod/SceneObj/YourObject.prefab
```

#### Spell/Magic Assets
```yaml
# Spell prefabs
- m_Address: Spell/WMD_YourSpellName
  # References: Assets/Build/YourMod/Spell/YourSpell.prefab
```

#### Other Assets
```yaml
# Items/Potions
- m_Address: Item/WMD_YourItemName
  # References: Assets/Build/YourMod/Item/YourItem.prefab

# Towers/Turrets
- m_Address: Tower/WMD_YourTowerName
  # References: Assets/Build/YourMod/Tower/YourTower.prefab

# Equipment/Accessories
- m_Address: Equipment/WMD_YourEquipmentName
  # References: Assets/Build/YourMod/Equipment/YourEquipment.prefab
```

### Example Registration Process:
1. **Generate your mod assets** (prefabs, scripts, configs)
2. **Open Default Local Group.asset** in Unity Inspector
3. **Add each asset** following the naming pattern: `Category/WMD_YourAssetName`
4. **Verify addressable paths** match your Lua loading code
5. **Test loading** with `CL.ResourceMgr.Load("Category/WMD_YourAssetName")`

### Important Notes:
- **All mod assets** must be registered in Addressables to be loaded at runtime
- **Use "WMD_" prefix** for all addressable names (m_Address field) to match existing conventions
- **Do NOT use "WMD_" prefix** for actual file names or directory names
- **Group related assets** (weapon + icon + effects + projectiles) together in the file
- **Maintain alphabetical order** within each category when possible
- **Config assets** (.asset files) are automatically handled and don't need Addressable registration

### File Naming vs Addressable Naming Examples:
```
‚úÖ CORRECT:
File: Assets/Build/MagicSword/Weapon/MagicSword.prefab
Addressable: Weapon/WMD_MagicSword

‚úÖ CORRECT:
File: Assets/Build/FireBall/Script/FireBallScript.txt
Addressable: LuaScript/WMD_FireBallScript

‚ùå INCORRECT:
File: Assets/Build/WMD_MagicSword/Weapon/WMD_MagicSword.prefab
Addressable: Weapon/WMD_MagicSword
```

## Prefab Structure Standards

**AI Workflow: READ ‚Üí COPY ‚Üí MODIFY**
1. **READ** reference prefab using `read_file` or `mcp_unityMCP_manage_asset`
2. **COPY** exact GameObject hierarchy and components
3. **MODIFY** only asset references (meshes, materials, scripts)

### Weapon Prefabs
**Templates:** `Assets/Toolkit/TemplateWizard/Dummy/Sword.prefab`, `Gun.prefab`, `Axe.prefab`, `Shotgun.prefab`
**Examples:** `Assets/Build/SwordLightBlade/Weapon/SwordLightBlade.prefab`, `Gun_AK47/Weapon/Gun_AK47.prefab`

### Projectile/FlyObject Prefabs
**Template:** `Assets/Toolkit/TemplateWizard/Dummy/Bullet.prefab`
**Examples:** `Assets/Build/Bow_Magic/FlyObj/Bow_Magic_Arrow.prefab`, `Gun_AK47/FlyObj/Gun_AK47_Bullet.prefab`

### Effect Prefabs
**Examples:** `Assets/Resources/Effects/EnergySpark.prefab`, `Assets/Build/Spell_FireBall/Effect/Spell_FireBall_Effect.prefab`

### Role/Character Prefabs
**Template:** `Assets/Toolkit/TemplateWizard/Dummy/Role.prefab`
**Example:** `Assets/Build/SimpleRole/Role/SimpleRole.prefab`

### Avatar Prefabs
**Template:** `Assets/Toolkit/TemplateWizard/Dummy/Avatar.prefab`
**Examples:** `Assets/Build/SimpleAvatar/Avatar/SimpleAvatar.prefab`, `SimpleAvatar_Huge/Avatar/SimpleAvatar_Huge.prefab`

### Character Skin Prefabs
**Example:** `Assets/Build/SimpleCharacterSkin/Skin/SimpleCharacterSkin.fbx`

### Scene Prefabs
**Examples:** `Assets/Build/SimpleScene/Scene/SimpleScene.prefab`, `SceneArena/Scene/SceneArena.prefab`, `SurvivorMode/Scene/SurvivorScene.prefab`

### Spell/Magic Prefabs
**Examples:** `Assets/Build/Spell_FireBall/Spell/Spell_FireBall.prefab`, `Spell_Thunder/Spell/Spell_Thunder.prefab`

### Item/Potion Prefabs
**Example:** `Assets/Build/Potion_HP/Item/Potion_HP.prefab`

### Tower/Turret Prefabs
**Example:** `Assets/Build/Tower_Turret/Tower/Tower_Turret.prefab`

### Equipment Prefabs
**Examples:** `Assets/Build/Scabbard/Equipment/Scabbard.prefab`, `Scabbard_Sword/Equipment/Scabbard_Sword.prefab`

## Component Requirements by Prefab Type

### Essential Components (All Interactive Objects):
- `Transform`, `InteractBase`/`InteractTriggerX`, `LuaBehaviour`, `NetworkIdentity`

### Weapon Components:
- `Rigidbody`, `WeaponData`, `AudioSource`, `MeshRenderer`, `MeshFilter`, `Collider`

### Projectile Components:
- `InteractTriggerX`, `FlyObjectX`, `TrailRenderer`, `Rigidbody`

### Character Components:
- `SkinnedMeshRenderer`, `Animator`, `RagdollBoneInfo`, `CharacterMotion`, `InteractCharacter`

### Network Components:
- `NetworkInteractBase`, `NetworkTransformFix`, `NetworkRigidbodySyncBase`, `NetworkIBStateX`



## Best Practices

1. **Always examine reference prefabs** before creating new ones
2. **Follow Unity Humanoid standards** for character bone naming
3. **Test multiplayer compatibility** with NetworkIdentity components
4. **Optimize performance** by using appropriate LOD levels
5. **Maintain consistent naming** across all mod assets
6. **Document custom Lua scripts** with clear comments
7. **Test thoroughly** in both single-player and multiplayer modes

## WMD_ Prefix Usage Summary

**‚ö†Ô∏è Key Points:**
- **WMD_ prefix is ONLY used for Addressable paths and Lua resource loading code**
- **Asset files and directory naming should NOT use WMD_ prefix**
- **Follow existing project standard naming conventions**

**Correct Examples:**
```
File Structure:
Assets/Build/MagicSword/
‚îú‚îÄ‚îÄ Weapon/MagicSword.prefab          ‚úÖ No WMD_ prefix
‚îú‚îÄ‚îÄ Script/MagicSwordScript.txt       ‚úÖ No WMD_ prefix
‚îú‚îÄ‚îÄ ICon/MagicSword_icon.png          ‚úÖ No WMD_ prefix
‚îî‚îÄ‚îÄ Config/MagicSword_Info.asset      ‚úÖ No WMD_ prefix

Addressable Configuration:
- m_Address: "Weapon/WMD_MagicSword"  ‚úÖ Use WMD_ prefix
- References: "Assets/Build/MagicSword/Weapon/MagicSword.prefab"

Lua Loading Code:
local weapon = CL.ResourceMgr.Load("Weapon/WMD_MagicSword")  ‚úÖ Use WMD_ prefix
```

**Wrong Examples:**
```
‚ùå Assets/Build/WMD_MagicSword/Weapon/WMD_MagicSword.prefab
‚ùå Using WMD_ prefix in directory names and file names
```

## üö® AI PREFAB CHECKLIST

**Before generating prefabs:**
- [ ] Read reference prefab structure
- [ ] Copy exact hierarchy and components  
- [ ] Only modify asset references

**Never do:**
- ‚ùå Create prefabs from scratch
- ‚ùå Skip required components
- ‚ùå Modify GameObject hierarchy
